#!/usr/bin/python

import os
import sys

TRYFROM_U8_PATTERN = """impl TryFrom<u8> for %s {
	type Error = Iso7816Error;

	fn try_from(value: u8) -> Result<Self, Self::Error> {
		match value%s {
%s		_ => Err(Self::Error::ValueError)
		}
	}
}
"""

FROM_ENUM_PATTERN = """impl From<%s> for u8 {
	fn from(value: %s) -> u8 {
		match value {
%s		}
	}
}
"""

BITOR_IMPL = """impl<T> BitOr<T> for %s where T: Into<u8> {
	type Output = u8;

	fn bitor(self, rhs: T) -> u8 {
		let a: u8 = self.into();
		let b: u8 = rhs.into();
		a | b
	}
}
"""

def emit_convs(tn, d, mask):
	global outfile
	global TRYFROM_PATTERN
	global INTO_PATTERN

	nums = list(d.keys())
	nums.sort()
	tryfrom_u8_str = ""
	from_enum_str = ""

	for n in nums:
		tryfrom_u8_str += "\t\t%s => Ok(Self::%s),\n" % (n, vRev[n])
		from_enum_str += "\t\t%s::%s => %s,\n" % (tn, vRev[n], n)

	outfile.write(TRYFROM_U8_PATTERN % (tn, mask and (" & %s" % mask) or "", tryfrom_u8_str))
	outfile.write(FROM_ENUM_PATTERN % (tn, tn, from_enum_str))
	outfile.write(BITOR_IMPL % tn)

tname = None

infile = open(sys.argv[1], "r")
outfile = open(sys.argv[2], "w")

outfile.write("// THIS FILE IS AUTOGENERATED -- DO NOT EDIT\n")
outfile.write("use core::ops::BitOr;\n")

for ln in infile:
	if ln.startswith("pub enum"):
		fields = ln.split(" ")
		tname = fields[2]
		vRev = {}
		mask = None
	elif tname is not None:
		if ln.startswith("    /* mask:"):
			mask = ln[12:-4]
		elif "=" in ln:
			fn, _, vn = ln.strip().split(" ")
			vn = vn.strip(",")
			vRev[vn] = fn
		elif ln.startswith("}"):
			emit_convs(tname, vRev, mask)
			tname = None
		else:
			outfile.write("// not emitting %s, bogus line: %s\n" % (tname, ln))
			# suppress emitting this enum, probably not meant to be?
			tname = None

sys.exit(0)
